# -*- coding: utf-8 -*-
"""Forex Predictor App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10XP140GDYuHh-NA9hHGk4TznZjrF-H-N
"""


import streamlit as st
import pandas as pd
import numpy as np
import os
import joblib
import matplotlib.pyplot as plt

st.set_page_config(page_title="Currency Forecast App", layout="wide")
st.title("ðŸ’¹ Currency Exchange Rate Forecast")

# --- SETTINGS ---
MODEL_DIR = "arima_models"
DEFAULT_CSV = "Foreign_Exchange_Rates 2(in).csv"

 # --- Load Exchange Rate Data ---
@st.cache
def load_exchange_data():
      df = pd.read_csv(DEFAULT_CSV)
      df.columns = df.columns.str.strip()
      df.drop(columns='Unnamed: 0', inplace=True)
      df['Time Serie'] = pd.to_datetime(df['Time Serie'], errors='coerce', format='mixed', dayfirst=True)
      df = df.set_index('Time Serie')
      df = df.apply(pd.to_numeric, errors='coerce').fillna(method='ffill')
      df.fillna(method='ffill', inplace=True)  # forward fill

      return df



# --- List available models ---
@st.cache
def get_available_models():
    models = [f for f in os.listdir(MODEL_DIR) if f.endswith('.joblib')]
    return [f.replace("_arima_model.joblib", "").replace("_", "/") for f in models]

# --- Forecast using model ---
def make_forecast(currency_code, horizon):
    model_path = os.path.join(MODEL_DIR, currency_code.replace("/", "_") + "_arima_model.joblib")
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model not found for {currency_code}")

    model = joblib.load(model_path)
    series = data[currency_code]

    last_date = series.index[-1]
    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=horizon, freq='D')
    forecast = model.predict(n_periods=horizon)

    forecast_df = pd.DataFrame({
        'Date': future_dates,
        'Forecast': forecast
    }).set_index('Date')

    return forecast_df, series

# --- Main UI ---
data = load_exchange_data()
available_currencies = get_available_models()

currency = st.selectbox("Select a currency", available_currencies)
horizon = st.number_input("Forecast horizon (days)", min_value=7, max_value=90, value=30)

if st.button("Generate Forecast"):
    try:
        forecast_df, historical_series = make_forecast(currency, horizon)

        # --- Table ---
        st.subheader("ðŸ“‹ Forecast Table")
        st.dataframe(forecast_df.style.format("{:.4f}"))

        # --- Plot ---
        st.subheader("ðŸ“ˆ Forecast Plot")
        fig, ax = plt.subplots(figsize=(10, 4))
        historical_series.tail(60).plot(ax=ax, label="Historical", marker='o')
        forecast_df['Forecast'].plot(ax=ax, label="Forecast", marker='x')
        ax.set_title(f"{currency} Forecast ({horizon} days)")
        ax.legend()
        st.pyplot(fig)

    except Exception as e:
        st.error(f"Error generating forecast: {e}")

